# Multi-stage Dockerfile for MCP DevOps Server Python implementation

# Build stage
FROM python:3.12-slim as builder

LABEL maintainer="mupoese"
LABEL description="MCP DevOps Server - Python-based Model Context Protocol server"
LABEL version="2.0.0"

# Set build arguments
ARG BUILDKIT_INLINE_CACHE=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set up Python environment
WORKDIR /build
COPY requirements.txt pyproject.toml ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.12-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    docker.io \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r mcpdevops && useradd -r -g mcpdevops -s /bin/bash mcpdevops

# Set up application directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY mcp_devops_server/ ./mcp_devops_server/
COPY pyproject.toml requirements.txt ./

# Install the package in development mode
RUN pip install -e .

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/config && \
    chown -R mcpdevops:mcpdevops /app

# Switch to non-root user
USER mcpdevops

# Set environment variables
ENV PYTHONPATH=/app
ENV MCP_DEVOPS_ENVIRONMENT=production
ENV MCP_DEVOPS_LOG_LEVEL=INFO
ENV MCP_DEVOPS_TRANSPORT_TYPE=stdio

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -m mcp_devops_server.main health || exit 1

# Default command
CMD ["python", "-m", "mcp_devops_server.main", "serve"]

# Development stage
FROM production as development

USER root

# Install development dependencies
RUN pip install -e ".[dev]"

# Install additional development tools
RUN apt-get update && apt-get install -y \
    vim \
    less \
    htop \
    && rm -rf /var/lib/apt/lists/*

USER mcpdevops

# Override environment for development
ENV MCP_DEVOPS_ENVIRONMENT=development
ENV MCP_DEVOPS_DEBUG=true
ENV MCP_DEVOPS_LOG_LEVEL=DEBUG

CMD ["python", "-m", "mcp_devops_server.main", "serve", "--debug"]